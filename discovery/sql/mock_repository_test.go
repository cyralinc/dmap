// Code generated by mockery v2.42.1. DO NOT EDIT.

package sql

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockRepository) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockRepository_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockRepository_Expecter) Close() *MockRepository_Close_Call {
	return &MockRepository_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockRepository_Close_Call) Run(run func()) *MockRepository_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRepository_Close_Call) Return(_a0 error) *MockRepository_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Close_Call) RunAndReturn(run func() error) *MockRepository_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Introspect provides a mock function with given fields: ctx
func (_m *MockRepository) Introspect(ctx context.Context) (*Metadata, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Introspect")
	}

	var r0 *Metadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*Metadata, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *Metadata); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Metadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Introspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Introspect'
type MockRepository_Introspect_Call struct {
	*mock.Call
}

// Introspect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) Introspect(ctx interface{}) *MockRepository_Introspect_Call {
	return &MockRepository_Introspect_Call{Call: _e.mock.On("Introspect", ctx)}
}

func (_c *MockRepository_Introspect_Call) Run(run func(ctx context.Context)) *MockRepository_Introspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_Introspect_Call) Return(_a0 *Metadata, _a1 error) *MockRepository_Introspect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Introspect_Call) RunAndReturn(run func(context.Context) (*Metadata, error)) *MockRepository_Introspect_Call {
	_c.Call.Return(run)
	return _c
}

// ListDatabases provides a mock function with given fields: ctx
func (_m *MockRepository) ListDatabases(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabases")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_ListDatabases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDatabases'
type MockRepository_ListDatabases_Call struct {
	*mock.Call
}

// ListDatabases is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) ListDatabases(ctx interface{}) *MockRepository_ListDatabases_Call {
	return &MockRepository_ListDatabases_Call{Call: _e.mock.On("ListDatabases", ctx)}
}

func (_c *MockRepository_ListDatabases_Call) Run(run func(ctx context.Context)) *MockRepository_ListDatabases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_ListDatabases_Call) Return(_a0 []string, _a1 error) *MockRepository_ListDatabases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_ListDatabases_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockRepository_ListDatabases_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *MockRepository) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockRepository_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) Ping(ctx interface{}) *MockRepository_Ping_Call {
	return &MockRepository_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockRepository_Ping_Call) Run(run func(ctx context.Context)) *MockRepository_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_Ping_Call) Return(_a0 error) *MockRepository_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Ping_Call) RunAndReturn(run func(context.Context) error) *MockRepository_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// SampleTable provides a mock function with given fields: ctx, meta, params
func (_m *MockRepository) SampleTable(ctx context.Context, meta *TableMetadata, params SampleParameters) (Sample, error) {
	ret := _m.Called(ctx, meta, params)

	if len(ret) == 0 {
		panic("no return value specified for SampleTable")
	}

	var r0 Sample
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *TableMetadata, SampleParameters) (Sample, error)); ok {
		return rf(ctx, meta, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *TableMetadata, SampleParameters) Sample); ok {
		r0 = rf(ctx, meta, params)
	} else {
		r0 = ret.Get(0).(Sample)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *TableMetadata, SampleParameters) error); ok {
		r1 = rf(ctx, meta, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_SampleTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SampleTable'
type MockRepository_SampleTable_Call struct {
	*mock.Call
}

// SampleTable is a helper method to define mock.On call
//   - ctx context.Context
//   - meta *TableMetadata
//   - params SampleParameters
func (_e *MockRepository_Expecter) SampleTable(ctx interface{}, meta interface{}, params interface{}) *MockRepository_SampleTable_Call {
	return &MockRepository_SampleTable_Call{Call: _e.mock.On("SampleTable", ctx, meta, params)}
}

func (_c *MockRepository_SampleTable_Call) Run(run func(ctx context.Context, meta *TableMetadata, params SampleParameters)) *MockRepository_SampleTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*TableMetadata), args[2].(SampleParameters))
	})
	return _c
}

func (_c *MockRepository_SampleTable_Call) Return(_a0 Sample, _a1 error) *MockRepository_SampleTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_SampleTable_Call) RunAndReturn(run func(context.Context, *TableMetadata, SampleParameters) (Sample, error)) *MockRepository_SampleTable_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of Mocksql. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
